function Donut(container,config,data){this.container=container||"holder";this.defaults={};this.defaults.width=600;this.defaults.height=600;this.defaults.centerX=300;this.defaults.centerY=300;this.defaults.radius=50;this.defaults.lineWidth=30;this.defaults.lineColor=[];this.defaults.labelTextStyle={stroke:"#FFFFFF","font-size":14};this.defaults.labelText=["aaa","bbb"];this.defaults.labelOffset=50;this.setConfig(config);this.setData(data)}Donut.prototype.setConfig=function(config){var prop;if(config){for(prop in config){if(config.hasOwnProperty(prop)){this.defaults[prop]=config[prop]}}}};Donut.prototype.setData=function(data){if(!data){throw new Error("Please set which data to represent.")}this.data=data};Donut.prototype.draw=function(){var self=this;if(!self.container){throw new Error("Please set which DOM node to render.")}var conf=self.defaults;var R=Raphael(self.container,conf.width,conf.height),r=conf.radius,data=self.data,colors=conf.lineColor,ox=self.defaults.centerX,oy=self.defaults.centerY,param={stroke:"#000","stroke-width":conf.lineWidth};var sum=0;for(var i=0;i<data.length;i++){sum+=data[i]}R.customAttributes.arc=function(arc_config){var value=arc_config.value,total=arc_config.total,r=arc_config.radius;var alpha=360/total*value,a=(90-alpha)*Math.PI/180,x=ox+r*Math.cos(a),y=oy-r*Math.sin(a),color=arc_config.color||"hsb(".concat(Math.round(r)/200,",",value/total,", .75)"),path;if(total==value){path=[["M",ox,oy-r],["A",r,r,0,1,1,ox-0.01,oy-r]]}else{path=[["M",ox,oy-r],["A",r,r,0,+(alpha>180),1,x,y]]}return{path:path,stroke:color}};var part_1=R.path().attr(param).attr({arc:[{value:sum,total:sum,radius:r,color:colors.length>0?colors[0]:null}]});var part_2=R.path().attr(param).attr({arc:[{value:data[0],total:sum,radius:r,color:colors.length>0?colors[1]:null}]});var alpha=180/sum*data[0],offset=conf.labelOffset,a=(90-alpha)*Math.PI/180,x=ox+(r+offset)*Math.cos(a),y=oy-(r+offset)*Math.sin(a);var text_1=R.text(x,y,conf.labelText[0]).attr(conf.labelTextStyle);alpha=180/sum*data[1],a=(90-alpha)*Math.PI/180,x=ox-(r+offset)*Math.cos(a),y=oy-(r+offset)*Math.sin(a);
var text_2=R.text(x,y,conf.labelText[1]).attr(conf.labelTextStyle)};
function Column(container,config,data){this.container=container||"holder";this.defaults={};this.defaults.width=600;this.defaults.height=400;this.defaults.axisStyle={stroke:"#FFF","stroke-width":1,fill:"#0ff"};this.defaults.axisInterval=4;this.defaults.axisGridStyle={stroke:"#FFF","stroke-width":0.5,fill:"#0ff","stroke-dasharray":". "};this.defaults.axisLabelStyle={fill:"#FFFFFF","font-size":14};this.defaults.labelText=["aaa","bbb"];this.defaults.labelOffsetX=10;this.defaults.labelOffsetY=15;this.defaults.showDataLabel=true;this.defaults.labelDataStyle={fill:"#FFFFFF","font-size":12};this.defaults.lineTitle=["aaa","bbb"];this.defaults.marginLeft=40;this.defaults.marginBottom=40;this.defaults.marginTop=40;this.defaults.marginRight=40;this.defaults.boxLineWidth=2;this.defaults.rectStyle={fill:"#CBF400",stroke:"none","fill-opacity":0.75};this.setConfig(config);this.setData(data)}Column.prototype.setConfig=function(config){var prop;if(config){for(prop in config){if(config.hasOwnProperty(prop)){this.defaults[prop]=config[prop]}}}};Column.prototype.setData=function(data){if(!data){throw new Error("Please set which data to represent.")}this.data=data};Column.prototype.draw=function(){var self=this;if(!self.container){throw new Error("Please set which DOM node to render.")}var conf=self.defaults;var R=Raphael(self.container,conf.width,conf.height),data=self.data,axisStyle=conf.axisStyle,axisInterval=conf.axisInterval,axisGridStyle=conf.axisGridStyle,labelOffsetX=conf.labelOffsetX,labelOffsetY=conf.labelOffsetY,labelText=conf.labelText,labelDataStyle=conf.labelDataStyle,rectStyle=conf.rectStyle,showDataLabel=conf.showDataLabel,axisLabelStyle=conf.axisLabelStyle,param={stroke:"#fff","stroke-width":conf.boxLineWidth};var box=R.rect(0,0,conf.width,conf.height).attr(param);var sum=0,max=0,min=Number.MAX_VALUE;for(var i=0;i<data.length;i++){sum+=data[i];max=data[i]>max?data[i]:max;min=data[i]<min?data[i]:min}var avg=sum/data.length;var innerBox={width:conf.width-conf.marginLeft-conf.marginRight,height:conf.height-conf.marginTop-conf.marginBottom,ox:conf.marginLeft,oy:conf.height-conf.marginBottom};
var xAxis={interval:innerBox.width/(data.length),line:line(R,innerBox.ox,innerBox.oy,(innerBox.ox+innerBox.width),innerBox.oy,axisStyle),labels:[]},yAxis={interval:innerBox.height/(axisInterval+1),line:line(R,innerBox.ox,innerBox.oy,innerBox.ox,(innerBox.oy-innerBox.height),axisStyle),labels:[]};var xAxisGrid={line:[]};for(var i=0;i<data.length;i++){var x=innerBox.ox+xAxis.interval*(i+1),y=innerBox.oy-innerBox.height;xAxisGrid.line[i]=line(R,x,innerBox.oy,x,y,axisGridStyle);xAxis.labels[i]=R.text(x-xAxis.interval/2,innerBox.oy+labelOffsetX,labelText[i%labelText.length]).attr(axisLabelStyle)}var yAxisGrid={line:[]};var yInterval=maxDigit(max);if(yInterval==1){yInterval=parseInt(max/axisInterval)}for(var i=0;i<axisInterval;i++){var x=innerBox.ox,y=innerBox.oy-yAxis.interval*(i+1);yAxisGrid.line[i]=line(R,x,y,x+innerBox.width,y,axisGridStyle);yAxis.labels[i]=R.text(x-labelOffsetY,y,(yInterval*(i+1)).toFixed(0)).attr(axisLabelStyle)}var dataRect={rect:[],labels:[]},rectW=xAxis.interval/2,maxY=max/(yInterval*(axisInterval+1))*innerBox.height;for(var i=0;i<data.length;i++){var rectH=data[i]/max*maxY;var x=innerBox.ox+xAxis.interval*(i+1)-xAxis.interval/2-rectW/2;var y=innerBox.oy-rectH;dataRect.rect[i]=R.rect(x,y,rectW,rectH).attr(rectStyle);dataRect.labels[i]=R.text(innerBox.ox+xAxis.interval*(i+1)-xAxis.interval/2,y-10,data[i]).attr(labelDataStyle).hide();if(showDataLabel){dataRect.labels[i].show()}(function(sh,index){sh[0].style.cursor="pointer";sh[0].onmouseover=function(){sh.animate({"fill-opacity":1},200);if(!showDataLabel){dataRect.labels[index].show()}};sh[0].onmouseout=function(){sh.animate({"fill-opacity":0.75},200);if(!showDataLabel){dataRect.labels[index].hide()}}})(dataRect.rect[i],i)}};
function line(R,sx,sy,tx,ty,attr){return R.path("M"+sx+" "+sy+"L"+tx+" "+ty).attr(attr)}function maxDigit(num){var res=1;num=parseInt(num/10);while(num>0){num=parseInt(num/10);res*=10}return res};
function Bubble(container,config,data){this.container=container||"holder";this.defaults={};this.defaults.width=600;this.defaults.height=400;this.defaults.centerX=300;this.defaults.centerY=300;this.defaults.radius=30;this.defaults.lineWidth=30;this.defaults.lineColor=[];this.defaults.labelTextStyle={stroke:"#FFFFFF","font-size":14};this.defaults.labelText=["aaa","bbb"];this.defaults.labelOffset=10;this.defaults.labelDataStyle={fill:"#FFFFFF","font-size":14};this.defaults.lineTitle=["aaa","bbb"];this.defaults.marginLeft=40;this.defaults.marginBottom=40;this.defaults.marginTop=40;this.defaults.marginRight=40;this.defaults.minRadius=20;this.defaults.maxRadius=80;this.defaults.boxLineWidth=2;this.setConfig(config);this.setData(data)}Bubble.prototype.setConfig=function(config){var prop;if(config){for(prop in config){if(config.hasOwnProperty(prop)){this.defaults[prop]=config[prop]}}}};Bubble.prototype.setData=function(data){if(!data){throw new Error("Please set which data to represent.")}this.data=data};Bubble.prototype.draw=function(){var self=this;if(!self.container){throw new Error("Please set which DOM node to render.")}var conf=self.defaults;var R=Raphael(self.container,conf.width,conf.height),r=conf.radius,data=self.data,colors=conf.lineColor,ox=0,oy=0,offset=conf.labelOffset,param={stroke:"#fff","stroke-width":conf.boxLineWidth};var box=R.rect(0,0,conf.width,conf.height).attr(param);var sum=0,max=0;for(var i=0;i<data.length;i++){sum+=data[i];max=data[i]>max?data[i]:max}var avg=sum/data.length;var circles=[],bg_circles=[],data_labels=[],categories=[];var xStart=conf.marginLeft,xEnd=conf.marginRight,xAxis={interval:(conf.width-xStart-xEnd)/(data.length>1?(data.length-1):1),length:conf.width-xStart-xEnd},yStart=conf.marginTop,yEnd=conf.marginBottom,yAxis={interval:(conf.width-yStart-yEnd)/(data.length>1?(data.length-1):1),length:conf.height-yStart-yEnd},color;for(var i=0;i<data.length;i++){ox=xAxis.interval*i+xStart;oy=yAxis.length-data[i]/max*yAxis.length+yStart+yEnd;r=(data[i]/avg)*conf.radius;
if(r<conf.minRadius){r=conf.minRadius}else{if(r>conf.maxRadius){r=conf.maxRadius}}color=colors[i%colors.length]||"hsb(".concat(Math.round(r)/200,",",data[i]/(sum-data[i]),", .75)");bg_circles[i]=R.circle(ox,oy,r).attr({fill:color,"stroke-width":3,"fill-opacity":1,stroke:"#aaa"}).data("index",i).hide();circles[i]=R.circle(ox,oy,r).attr({fill:color,"stroke-width":0,"fill-opacity":0.85}).data("index",i).toFront();data_labels[i]=R.text(ox,oy-r-offset,data[i]).attr(conf.labelDataStyle).hide();categories[i]=R.text(ox,oy,conf.labelText[i%conf.labelText.length]).attr(conf.labelTextStyle).data("index",i);categories[i].mouseover(function(){bg_circles[this.data("index")].show().toFront();data_labels[this.data("index")].show().toFront();categories[this.data("index")].show().toFront()});circles[i].mouseover(function(){bg_circles[this.data("index")].show().toFront();data_labels[this.data("index")].show().toFront();categories[this.data("index")].show().toFront()});bg_circles[i].mouseout(function(){this.hide();data_labels[this.data("index")].hide()})}};
